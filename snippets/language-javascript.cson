'.source.js':
  'Object Method':
    'prefix': ':f'
    'body': '${1:method_name}: function (${2:attribute}) {\n\t$3\n}${4:,}'
  'Object key — key: "value"':
    'prefix': ':'
    'body': '${1:key}: ${2:"${3:value}"}${4:, }'
  'Prototype':
    'prefix': 'proto'
    'body': '${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {\n\t${0:// body...}\n};'
  'do':
    'prefix': 'do'
    'body': 'do {\n\t$2\n} while (${1:true});'
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if … else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'for':
    'prefix' : 'for'
    'body' : 'for (var ${2:i} = 0; ${2:i} < ${1:array}.length; ${2:i}++) {\n\t${1:array}[${2:i}]$3\n}'
  'for in':
    'prefix': 'forin'
    'body': 'for (${1:variable} in ${2:object}) {\n\t${5:if (${3:object}.hasOwnProperty(${4:variable})) {\n\t\t$6\n\t}}\n}'
  'for of':
    'prefix': 'forof'
    'body': 'for (${1:variable} of ${2:iterable}) {\n\t$3\n}'
  'Function':
    'prefix': 'fun'
    'body': 'function ${1:function_name}(${2:argument}) {\n\t${0:// body...}\n}'
  'Anonymous Function':
    'prefix': 'f'
    'body': 'function ($1) {\n\t$2\n}'
  'Generator':
    'prefix': 'gen',
    'body': 'function* ${1:function_name}(${2:argument}) {\n\t${0:// body...}\n}'
  'Anonymous Generator':
    'prefix': 'g'
    'body': 'function* ($1) {\n\t$2\n}'
  'getElementById':
    'prefix': 'get'
    'body': 'getElementById(${1:\'${2:id}\'})'
  'getElementsByClassName':
    'prefix': 'get'
    'body': 'getElementsByClassName(${1:\'${2:className}\'})'
  'getElementsByName':
    'prefix': 'get'
    'body': 'getElementsByName(${1:\'${2:name}\'})'
  'getElementsByTagName':
    'prefix': 'get'
    'body': 'getElementsByTagName(${1:\'${2:tagName}\'})'
  'querySelector':
    'prefix': 'qs'
    'body': 'querySelector(${1:\'${2:query}\'})'
  'querySelectorAll':
    'prefix': 'qsa'
    'body': 'querySelectorAll(${1:\'${2:query}\'})'
  'Immediately-Invoked Function Expression':
    'prefix': 'iife'
    'body': '(function() {\n\t${1:"use strict";\n}\t$2\n}());'
  'log':
    'prefix': 'log'
    'body': 'console.log($1);$0'
  'warn':
    'prefix': 'warn'
    'body': 'console.warn($1);$0'
  'error':
    'prefix': 'error'
    'body': 'console.error($1);$0'
  'inspect':
    'prefix': 'inspect'
    'body': 'console.log(require(\'util\').inspect($0, { depth: null }));'
  'new Promise':
    'prefix': 'prom'
    'body': 'new Promise(function(resolve, reject) {\n\t$1\n});$0'
  'setInterval function':
    'prefix': 'interval'
    'body': 'setInterval(${2:function () {\n\t$3\n}}, ${1:10});'
  'setTimeout function':
    'prefix': 'timeout'
    'body': 'setTimeout(${2:function () {\n\t$3\n}}, ${1:10});'
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\n\tcase ${2:expression}:\n\t\t$4\n\t\tbreak;$5\n\tdefault:\n\t\t$3\n}'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t${1:statements}\n} catch (${2:variable}) {\n\t${3:statements}\n}${4: finally {\n\t${5:statements}\n}}'
  'while':
    'prefix': 'while'
    'body': 'while (${1:true}) {\n\t$2\n}'
  'Start Docblock':
    'prefix': '/**'
    'body': '/**\n * $1\n */$0'
  'CommonJS require':
    'prefix': 'req'
    'body': 'var ${1:module} = require(\'${1:module}\');'
