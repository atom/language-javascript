'scopeName': 'source.js.regexp'
'patterns': [
  {
    # RegExp with the unicode (u) flag
    'match': '(?x)
      (?>
        (?<=[\\[{=(?:+*,!~-]|^|return|=>|&&|\\|\\|)\\s*
        (/)
        (?![/*+?])
        ([^\\\\\\[/]*(?:(?:\\\\.|\\[[^\\\\\\]]*(?:\\\\.[^\\\\\\]]*)*\\])[^\\\\\\[/]*)*)
        (/)
      )
      (?:
        (?=(?>[gimsuy]{0,6})(?:[^\\w$]|$))
        (?=([gimsy]{0,5}u[gimsy]{0,5}))
        (?:(?=[gimsuy]{0,4}?([gimsuy])[gimsuy]{0,4}?\\5)(\\4)|(\\4))
      )'
    'captures':
      '0':
        'name': 'string.regexp.js'
      '1':
        'name': 'punctuation.definition.string.begin.js'
      '2':
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      '3':
        'name': 'punctuation.definition.string.end.js'
      '6':
        'name': 'invalid.illegal.flag.regexp'
      '7':
        'name': 'meta.flag.regexp'
  }
  {
    # RegExp without the unicode (u) flag
    'match': '(?x)
      (?>
        (?<=[\\[{=(?:+*,!~-]|^|return|=>|&&|\\|\\|)\\s*
        (/)
        (?![/*+?])
        ([^\\\\\\[/]*(?:(?:\\\\.|\\[[^\\\\\\]]*(?:\\\\.[^\\\\\\]]*)*\\])[^\\\\\\[/]*)*)
        (/)
      )
      (?:
        (?=((?>[gimsy]{0,5}))(?:[^\\w$]|$))
        (?:(?=[gimsy]{0,3}?([gimsy])[gimsy]{0,3}?\\5)(\\4)|(\\4))
        |
        ([\\w$]*)
      )'
    'captures':
      '0':
        'name': 'string.regexp.js'
      '1':
        'name': 'punctuation.definition.string.begin.js'
      '2':
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      '3':
        'name': 'punctuation.definition.string.end.js'
      '6':
        'name': 'invalid.illegal.flag.regexp'
      '7':
        'name': 'meta.flag.regexp'
      '8':
        'name': 'invalid.illegal.flag.regexp'
  }
]
'repository':
  'regex-character-class-for-set--both':
    'patterns': [
      {
        # Special characters
        'match': '\\\\[wWsSdDtrnvfb]'
        'name': 'constant.character.character-class.regexp'
      }
      {
        # Hexadecimal numeric escape sequences
        'match': '(\\\\x([a-fA-F\\d]{2}))|(\\\\u([a-fA-F\\d]{4}))'
        'captures':
          '1':
            'name': 'constant.character.numeric.hexadecimal.regexp'
          '2':
            'name': 'constant.character.numeric.hexadecimal.character-code.regexp'  # code units/points 0x0000 to 0x00FF
          '3':
            'name': 'constant.character.numeric.unicode.regexp'
          '4':
            'name': 'constant.character.numeric.unicode.character-code.regexp'  # code units/points U+0000 to U+FFFF
      }
      {
        # Control character
        'match': '\\\\c([a-zA-Z])'
        'captures':
          '0':
            'name': 'constant.character.control.regexp'
          '1':
            'name': 'constant.character.control.character-code.regexp'
      }
    ]
  'regex-character-class-for-set--normal':
    'patterns': [
      {
        # Null character
        'match': '\\\\(?!0{1,2}[1-7])0{1,3}'
        'name': 'constant.character.character-class.null.regexp'
      }
      {
        # Octal numeric escape sequences
        'match': '(\\\\0(0?[1-7]|[1-7][0-7]))'
        'captures':
          1:
            'name': 'constant.character.numeric.octal.regexp'
          2:
            'name': 'constant.character.numeric.octal.character-code.regexp'  # code units/points 01 to 077
      }
      {
        'include': '#regex-character-class-for-set--both'
      }
      {
        # Escaped character
        # Exclude 'c' here because /\c/ matches a backslash followed by the letter 'c'. It does not represent an escaped 'c' character.
        'match': '(\\\\)[^c]'
        'captures':
          '1':
            'name': 'keyword.operator.escape-character.regexp'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]
  'regex-character-class-for-set--unicode':
    'patterns': [
      {
        # Null character
        'match': '\\\\0(?!\\d)'
        'name': 'constant.character.character-class.null.regexp'
      }
      {
        # Unicode code point escape sequence
        'match': '(\\\\u\\{(0*[a-fA-F\\d]{1,5}|10[a-fA-F\\d]{4})\\})|(\\\\u\\{(?=\\}|[a-fA-F\\d]*(?:[^a-fA-F\\d}]|$)))'
        'captures':
          '1':
            'name': 'constant.character.numeric.unicode.regexp'
          '2':
            'name': 'constant.character.numeric.unicode.character-code.regexp'  # code points U+10000 to U+10FFFF
          '3':
            'name': 'invalid.illegal.escape.regexp'
      }
      {
        # Invalid hexadecimal numeric escape sequences
        'match': '\\\\x(?=[a-fA-F\\d]?(?:[^a-fA-F\\d]|$))|\\\\u(?=[a-fA-F\\d]{0,3}(?:[^a-fA-F\\d]|$))'
        'name': 'invalid.illegal.escape.regexp'
      }
      {
        # Unicode property escape sequence
        'match': '(\\\\[pP]\\{(\\w+)(?:(=)([\\w.]+))?\\})|(\\\\[pP](?=$|[^{])|\\\\[pP]\\{(?=\\}|[\\w.]*(?:[^\\w.}]|$)))'
        'captures':
          '1':
            'name': 'constant.character.character-class.unicode-property.regexp'
          '2':
            'name': 'constant.character.character-class.unicode-property.name.regexp'
          '3':
            'name': 'keyword.operator.comparison.regexp'
          '4':
            'name': 'constant.character.character-class.unicode-property.value.regexp'
          '5':
            'name': 'invalid.illegal.escape.regexp'
      }
      {
        'include': '#regex-character-class-for-set--both'
      }
      {
        # Escaped character
        'match': '(\\\\)[\\\\/\\[\\]{}()^$?*+|-]'
        'captures':
          '1':
            'name': 'keyword.operator.escape-character.regexp'
        'name': 'constant.character.escape.backslash.regexp'
      }
      {
        # Errant backslash
        'match': '\\\\'
        'name': 'invalid.illegal.escape.regexp'
      }
    ]
  'regex-character-class--both':
    'patterns': [
      {
        # Dot character class (any single character except new line)
        'match': '\\.'
        'name': 'constant.character.character-class.regexp'
      }
    ]
  'regex-character-class--normal':
    'patterns': [
      {
        'include': '#regex-character-class-for-set--normal'
      }
      {
        'include': '#regex-character-class--both'
      }
    ]
  'regex-character-class--unicode':
    'patterns': [
      {
        'include': '#regex-character-class-for-set--unicode'
      }
      {
        'include': '#regex-character-class--both'
      }
    ]
  'regexp--both':
    'patterns': [
      {
        # Boundaries
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        # The 'or' operator
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
    ]
  'regexp--normal':
    'patterns': [
      {
        'include': '#regexp--both'
      }
      {
        # Quantifiers
        'match': '((?:[?+*]|\\{(?:\\d+(?:,\\d*)?)\\})\\??)((?:[?+*]|\\{(?:\\d+(?:,\\d*)?)\\})*)'
        'captures':
          '1':
            'name': 'keyword.operator.quantifier.regexp'
          '2':
            'name': 'invalid.illegal.quantifier.regexp'
      }
      {
        # Assertions
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      }
      {
        # Groups
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>)|(\\?))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
          '5':
            'name': 'invalid.illegal.quantifier.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      }
      {
        # Backreferences
        'match': '(\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>)'
        'captures':
          '1':
            'name': 'keyword.other.back-reference.regexp'
          '2':
            'name': 'entity.name.tag.back-reference.regexp'
      }
      {
        # Character sets
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.begin.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.end.regexp'
        'patterns': [
          {
            # Ranges
            #'match': '(?:(\\\\.+?)|[^\\]])(-)(?:(\\\\.+?)|[^\\]])'
            'match': '(?x)
              (?:(
              \\\\(?:[trnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|c[a-zA-Z]|[^cwWsSdD])
              )|[^\\\\\\]])(-)(?:(
              \\\\(?:[trnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|c[a-zA-Z]|[^cwWsSdD])
              )|[^\\\\\\]])'
            'captures':
              '1':
                'patterns': [
                  {
                    'include': '#regex-character-class-for-set--normal'
                  }
                ]
              '2':
                'name': 'punctuation.definition.character-class.range.hyphen.regexp'
              '3':
                'patterns': [
                  {
                    'include': '#regex-character-class-for-set--normal'
                  }
                ]
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set--normal'
          }
        ]
        'name': 'constant.other.character-class.set.regexp'
      }
      {
        'include': '#regex-character-class--normal'
      }
    ]
  'regexp--unicode':
    'patterns': [
      {
        'include': '#regexp--both'
      }
      {
        # Quantifiers
        'match': '(?x)
          ((?:[?+*]|\\{(?:\\d+(?:,\\d*)?)\\})\\??)((?:[?+*]|\\{(?:\\d+(?:,\\d*)?)\\})*)
          |
          (\\{)(?!(?:\\d+(?:,\\d*)?)\\})'
        'captures':
          '1':
            'name': 'keyword.operator.quantifier.regexp'
          '2':
            'name': 'invalid.illegal.quantifier.regexp'
          '3':
            'name': 'invalid.illegal.quantifier.regexp'
      }
      {
        # Assertions
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      }
      {
        # Groups
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>)|(\\?))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
          '5':
            'name': 'invalid.illegal.quantifier.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      }
      {
        # Backreferences
        'match': '(\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>)|(\\\\k(?=$|[^<])|\\\\k<(?=$|>|[^a-zA-Z_$]|[a-zA-Z_$][\\w$]*(?:[^\\w$>]|$)))'
        'captures':
          '1':
            'name': 'keyword.other.back-reference.regexp'
          '2':
            'name': 'entity.name.tag.back-reference.regexp'
          '3':
            'name': 'invalid.illegal.back-reference.regexp'
      }
      {
        # Character sets
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.begin.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.end.regexp'
        'patterns': [
          {
            # Ranges
            'match': '(?x)
              (?:(
              \\\\(?:[trnvfb\\\\\\[\\]{}()^$?*+|-]|0(?!\\d)|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|u\\{(?:0*[a-fA-F\\d]{1,5}|10[a-fA-F\\d]{4})\\}|c[a-zA-Z])
              )|[^\\\\\\]]|(\\\\[wWsSdD]))(-)(?:(
              \\\\(?:[trnvfb\\\\\\[\\]{}()^$?*+|-]|0(?!\\d)|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|u\\{(?:0*[a-fA-F\\d]{1,5}|10[a-fA-F\\d]{4})\\}|c[a-zA-Z])
              )|[^\\\\\\]]|(\\\\[wWsSdD]))'
            'captures':
              '1':
                'patterns': [
                  {
                    'include': '#regex-character-class-for-set--unicode'
                  }
                ]
              '2':
                'name': 'invalid.illegal.character-class.range.regexp'
              '3':
                'name': 'punctuation.definition.character-class.range.hyphen.regexp'
              '4':
                'patterns': [
                  {
                    'include': '#regex-character-class-for-set--unicode'
                  }
                ]
              '5':
                'name': 'invalid.illegal.character-class.range.regexp'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set--unicode'
          }
        ]
        'name': 'constant.other.character-class.set.regexp'
      }
      {
        'include': '#regex-character-class--unicode'
      }
    ]
