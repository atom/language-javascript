'scopeName': 'source.js.regexp'
'patterns': [
  {
    # RegExp without the unicode (u) flag
    'match': '(?>(?<=[\\[{=(?:+*,!~-]|^|return|=>|&&|\\|\\|)\\s*(/)(?![/*+?])((?:[^\\\\/]*\\\\.)*[^\\\\/]*)(/))(?=((?>[gimsy]{0,5}))(?:[\\]})?:+*,;.\\s]|&&|\\|\\||$))(?![gimsy]{0,3}?([gimsy])[gimsy]{0,3}?\\5)\\4'
    'captures':
      '0':
        'name': 'string.regexp.js'
      '1':
        'name': 'punctuation.definition.string.begin.js'
      '2':
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      '3':
        'name': 'punctuation.definition.string.end.js'
      '4':
        'name': 'meta.flag.regexp'
  }
  {
    # RegExp with the unicode (u) flag
    'match': '(?>(?<=[\\[{=(?:+*,!~-]|^|return|=>|&&|\\|\\|)\\s*(/)(?![/*+?])((?:[^\\\\/]*\\\\.)*[^\\\\/]*)(/))(?=(?>[gimsuy]{0,6})(?:[\\]})?:+*,;.\\s]|&&|\\|\\||$))(?![gimsuy]{0,4}?([gimsuy])[gimsuy]{0,4}?\\4)([gimsy]{0,5}u[gimsy]{0,5})'
    'captures':
      '0':
        'name': 'string.regexp.js'
      '1':
        'name': 'punctuation.definition.string.begin.js'
      '2':
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      '3':
        'name': 'punctuation.definition.string.end.js'
      '5':
        'name': 'meta.flag.regexp'
  }
]
'repository':
  'regex-character-class-for-set--both':
    'patterns': [
      {
        # Special characters
        'match': '\\\\[wWsSdDtrnvfb]|\\\\(?!0{1,2}[1-7])0{1,3}'
        'name': 'constant.character.character-class.regexp'
      }
      {
        # Numeric escape sequences
        'match': '(\\\\0(0?[1-7]|[1-7][0-7]))|(\\\\x([0-9A-Fa-f]{2}))|(\\\\u([0-9A-Fa-f]{4}))'
        'captures':
          1:
            'name': 'constant.character.numeric.octal.regexp'
          2:
            'name': 'constant.character.numeric.octal.code-point.regexp'  # code units/points 01 to 077
          3:
            'name': 'constant.character.numeric.hexadecimal.regexp'
          4:
            'name': 'constant.character.numeric.hexadecimal.code-point.regexp'  # code units/points 0x0000 to 0x00FF
          5:
            'name': 'constant.character.numeric.unicode.regexp'
          6:
            'name': 'constant.character.numeric.unicode.code-point.regexp'  # code units/points U+0000 to U+FFFF
      }
      {
        # Control character
        'match': '\\\\c[a-zA-Z]'
        'name': 'constant.character.control.regexp'
      }
    ]
  'regex-character-class-for-set--normal':
    'patterns': [
      {
        'include': '#regex-character-class-for-set--both'
      }
      {
        # Escaped character
        # Exclude 'c' here because /\c/ matches a backslash followed by the letter 'c'. It does not represent an escaped 'c' character.
        'match': '(\\\\)[^c]'
        'captures':
          '1':
            'name': 'keyword.operator.escape-character.regexp'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]
  'regex-character-class-for-set--unicode':
    'patterns': [
      {
        # Unicode code point escape sequence
        'match': '\\\\u\\{(0*[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4})\\}'
        'captures':
          0:
            'name': 'constant.character.numeric.unicode.regexp'
          1:
            'name': 'constant.character.numeric.unicode.code-point.regexp'  # code points U+10000 to U+10FFFF
      }
      {
        # Unicode property escape sequence
        'match': '\\\\[pP]\\{([0-9a-zA-Z_]+)(?:(=)([0-9a-zA-Z_.]+))?\\}'
        'captures':
          1:
            'name': 'constant.character.character-class.unicode-property.name.regexp'
          2:
            'name': 'keyword.operator.assignment.regexp'
          3:
            'name': 'constant.character.character-class.unicode-property.value.regexp'
        'name': 'constant.character.character-class.unicode-property.regexp'
      }
      {
        'include': '#regex-character-class-for-set--both'
      }
      {
        # Escaped character
        'match': '(\\\\)[\\\\\\[\\]{}()^$?*+|-]'
        'captures':
          '1':
            'name': 'keyword.operator.escape-character.regexp'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]
  'regex-character-class--both':
    'patterns': [
      {
        # Dot character class (any single character except new line)
        'match': '\\.'
        'name': 'constant.character.character-class.regexp'
      }
    ]
  'regex-character-class--normal':
    'patterns': [
      {
        'include': '#regex-character-class-for-set--normal'
      }
      {
        'include': '#regex-character-class--both'
      }
    ]
  'regex-character-class--unicode':
    'patterns': [
      {
        'include': '#regex-character-class-for-set--unicode'
      }
      {
        'include': '#regex-character-class--both'
      }
    ]
  'regexp--both':
    'patterns': [
      {
        # Boundaries
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        # Backreferences
        'match': '\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>'
        'captures':
          '1':
            'name': 'entity.name.tag.back-reference.regexp'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        # Quantifiers
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|\\d+)\\}'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        # The 'or' operator
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
    ]
  'regexp--normal':
    'patterns': [
      {
        'include': '#regexp--both'
      }
      {
        # Assertions
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      }
      {
        # Groups
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp--normal'
          }
        ]
      }
      {
        # Character sets
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.begin.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.end.regexp'
        'patterns': [
          {
            # Ranges
            #'match': '(?:(\\\\.+?)|[^\\]])(-)(?:(\\\\.+?)|[^\\]])'
            'match': '(?x)
              (?:(
              \\\\([wWsSdDtrnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[a-zA-Z]|[^c])
              )|[^\\]])(-)(?:(
              \\\\([wWsSdDtrnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[a-zA-Z]|[^c])
              )|[^\\]])'
            'captures':
              '1':
                'include': '#regex-character-class-for-set--normal'
              '2':
                'name': 'punctuation.definition.character-class.range.hyphen.regexp'
              '3':
                'include': '#regex-character-class-for-set--normal'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set--normal'
          }
        ]
        'name': 'constant.other.character-class.set.regexp'
      }
      {
        'include': '#regex-character-class--normal'
      }
    ]
  'regexp--unicode':
    'patterns': [
      {
        'include': '#regexp--both'
      }
      {
        # Assertions
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      }
      {
        # Groups
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.begin.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.end.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp--unicode'
          }
        ]
      }
      {
        # Character sets
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.begin.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.set.end.regexp'
        'patterns': [
          {
            # Ranges
            #'match': '(?:(\\\\.+?)|[^\\]])(-)(?:(\\\\.+?)|[^\\]])'
            'match': '(?x)
              (?:(
              \\\\(u\\{(0*[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4})\\}|[pP]\\{([0-9a-zA-Z_]+)(?:(=)([0-9a-zA-Z_.]+))?\\}|[wWsSdDtrnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[a-zA-Z]|[\\\\\\[\\]{}()^$?*+|-])
              )|[^\\]])(-)(?:(
              \\\\(u\\{(0*[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4})\\}|[pP]\\{([0-9a-zA-Z_]+)(?:(=)([0-9a-zA-Z_.]+))?\\}|[wWsSdDtrnvfb]|(?!0{1,2}[1-7])0{1,3}|00?[1-7]|[1-7][0-7]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[a-zA-Z]|[\\\\\\[\\]{}()^$?*+|-])
              )|[^\\]])'
            'captures':
              '1':
                'include': '#regex-character-class-for-set--unicode'
              '2':
                'name': 'punctuation.definition.character-class.range.hyphen.regexp'
              '3':
                'include': '#regex-character-class-for-set--unicode'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set--unicode'
          }
        ]
        'name': 'constant.other.character-class.set.regexp'
      }
      {
        'include': '#regex-character-class--unicode'
      }
    ]
