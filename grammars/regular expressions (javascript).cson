'scopeName': 'source.js.regexp'
#'patterns': [
#  {
#    'include': '#regexp'
#  }
#  {
#    'include': '#regexp-unicode'
#  }
#]
'repository':
  'regex-character-class':
    'patterns': [
      {
        'include': '#regex-character-class-for-set'
      }
      {
        'match': '\\.'
        'name': 'constant.character.character-class.regexp'
      }
    ]
  'regex-character-class-for-set':
    'patterns': [
      {
                                        #null (\0 or \00 or \000)
        'match': '\\\\[wWsSdDtrnvf]|\\\\(?!0{1,2}[1-7])0{1,3}'
        'name': 'constant.character.character-class.regexp'
      }
      {
        'match': '\\\\([0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'match': '\\\\c[a-zA-Z]'
        'name': 'constant.character.control.regexp'
      }
      {
        'match': '(\\\\)[^c]'
        'captures':
          '1': 'name': 'keyword.operator.escape-character.regexp'
        'name': 'constant.character.escape.backslash.regexp'
        #Note: /\c/ matches a backslash followed by the letter "c", instead of representing an escaped "c" character.
      }
    ]
  'regexp':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>'
        'captures':
          '1': 'name': 'entity.name.tag.back-reference.regexp'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp'
          }
        ]
      }
      {
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1': 'name': 'punctuation.definition.character-class.regexp'
          '2': 'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1': 'name': 'punctuation.definition.character-class.regexp'
        'patterns': [
          {
            'match': '(?:(\\\\.+?)|[^\\]])-(?:(\\\\.+?)|[^\\]])'
            'captures':
              '1': 'patterns': [ { 'include': '#regex-character-class-for-set' } ]
              '2': 'patterns': [ { 'include': '#regex-character-class-for-set' } ]
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set'
          }
        ]
        'name': 'constant.other.character-class.set.regexp'
      }
      {
        'include': '#regex-character-class'
      }
    ]
  'regex-character-class-unicode':
    'patterns': [
      {
        'include': '#regex-character-class-for-set-unicode'
      }
      {
        'match': '\\.'
        'name': 'constant.character.character-class.regexp'
      }
    ]
  'regex-character-class-for-set-unicode':
    'patterns': [
      {
        'match': '\\\\u\\{0*(?:[0-9a-fA-F]{1,5}|10[0-9a-fA-F]{4})\\}'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'include': '#regex-character-class-for-set'
      }
    ]
  'regexp-unicode':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*|\\\\k<[a-zA-Z_$][\\w$]*>'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '2':
            'name': 'entity.name.type.assertion.look-ahead.regexp'
          '3':
            'name': 'entity.name.type.assertion.negative-look-ahead.regexp'
          '4':
            'name': 'entity.name.type.assertion.look-behind.regexp'
          '5':
            'name': 'entity.name.type.assertion.negative-look-behind.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.atomic.assertion.regexp'
        'patterns': [
          {
            'include': '#regexp-unicode'
          }
        ]
      }
      {
        'begin': '(\\()(?:(\\?:)|(\\?<([a-zA-Z_$][\\w$]*)>))?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '2':
            'name': 'entity.name.type.non-capturing.regexp'
          '3':
            'name': 'entity.name.type.named.regexp'
          '4':
            'name': 'entity.name.tag.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#regexp-unicode'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1': 'name': 'punctuation.definition.character-class.regexp'
          '2': 'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1': 'name': 'punctuation.definition.character-class.regexp'
        'patterns': [
          {
            'match': '(?:(\\\\.+?)|[^\\]])-(?:(\\\\.+?)|[^\\]])'
            'captures':
              '1': 'patterns': [ { 'include': '#regex-character-class-for-set-unicode' } ]
              '2': 'patterns': [ { 'include': '#regex-character-class-for-set-unicode' } ]
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class-for-set-unicode'
          }
        ]
      }
      {
        'include': '#regex-character-class-unicode'
      }
    ]
