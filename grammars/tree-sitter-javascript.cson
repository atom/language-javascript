name: 'JavaScript'
scopeName: 'source.js'
type: 'tree-sitter'
parser: 'tree-sitter-javascript'

fileTypes: ['js', 'jsx']

injectionRegex: '^js$|^JS$|javascript|JavaScript'

firstLineRegex: [
  # shebang line
  '^#!.*\\b(node)\\r?\\n'

  # vim modeline
  'vim\\b.*\\bset\\b.*\\b(filetype|ft|syntax)=(js|javascript)'
]

folds: [
  {
    type: 'comment'
  }
  {
    type: ['jsx_element', 'template_string'],
    start: {index: 0}
    end: {index: -1}
  }
  {
    type: 'jsx_self_closing_element'
    start: {index: 1}
    end: {index: -2}
  }
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
  {
    type: ['switch_case', 'switch_default']
    start: {index: 0}
    end: {type: 'break_statement', index: -1}
  }
  {
    type: ['switch_case', 'switch_default']
    start: {index: 0}
  }
]

comments:
  start: '// '

scopes:
  'program': 'source.js'

  # Keyword
  '"if"': 'keyword.control.condition'
  '"else"': 'keyword.control.condition'
  '"switch"': 'keyword.control.condition'
  '"case"': 'keyword.control.condition'
  'switch_statement > "default"': 'keyword.control.condition'
  'export_statement > "default"': 'keyword.control.package'
  '"import"': 'keyword.control.package'
  '"export"': 'keyword.control.package'
  '"from"': 'keyword.control.package'
  '"do"': 'keyword.control.loop'
  '"while"': 'keyword.control.loop'
  '"for"': 'keyword.control.loop'
  '"break"': 'keyword.control.jump'
  '"continue"': 'keyword.control.jump'
  '"yield"': 'keyword.control.jump'
  '"return"': 'keyword.control.jump'
  '"await"': 'keyword.control.jump'
  '"debugger"': 'keyword.control.jump'
  '"throw"': 'keyword.control.jump'
  '"try"': 'keyword.control.exception'
  '"catch"': 'keyword.control.exception'
  '"finally"': 'keyword.control.exception'
  '"as"': 'keyword.control.evaluate'

  '"+"': 'keyword.operator.arithmetic.symbolic'
  '"-"': 'keyword.operator.arithmetic.symbolic'
  'binary_expression > "*"': 'keyword.operator.arithmetic.symbolic'
  'binary_expression > "/"': 'keyword.operator.arithmetic.symbolic'
  '"%"': 'keyword.operator.arithmetic.symbolic'
  '"++"': 'keyword.operator.arithmetic.symbolic'
  '"--"': 'keyword.operator.arithmetic.symbolic'

  '"&"': 'keyword.operator.bitwise.symbolic'
  '"|"': 'keyword.operator.bitwise.symbolic'
  '"^"': 'keyword.operator.bitwise.symbolic'
  '"~"': 'keyword.operator.bitwise.symbolic'
  '"<<"': 'keyword.operator.bitwise.symbolic'
  '">>"': 'keyword.operator.bitwise.symbolic'
  '">>>"': 'keyword.operator.bitwise.symbolic'

  '"="': 'keyword.operator.assignment.symbolic'
  '"+="': 'keyword.operator.assignment.compound.symbolic'
  '"-="': 'keyword.operator.assignment.compound.symbolic'
  '"*="': 'keyword.operator.assignment.compound.symbolic'
  '"/="': 'keyword.operator.assignment.compound.symbolic'
  '"%="': 'keyword.operator.assignment.compound.symbolic'
  '"&="': 'keyword.operator.assignment.compound.symbolic'
  '"|="': 'keyword.operator.assignment.compound.symbolic'
  '"^="': 'keyword.operator.assignment.compound.symbolic'
  '"<<="': 'keyword.operator.assignment.compound.symbolic'
  '">>="': 'keyword.operator.assignment.compound.symbolic'
  '">>>="': 'keyword.operator.assignment.compound.symbolic'

  '"=="': 'keyword.operator.comparison.symbolic'
  '"==="': 'keyword.operator.comparison.symbolic'
  '"!="': 'keyword.operator.comparison.symbolic'
  '"!=="': 'keyword.operator.comparison.symbolic'
  '"<"': 'keyword.operator.comparison.symbolic'
  '">"': 'keyword.operator.comparison.symbolic'
  '"<="': 'keyword.operator.comparison.symbolic'
  '">="': 'keyword.operator.comparison.symbolic'

  '"in"': 'keyword.operator.comparison'
  '"of"': 'keyword.operator.comparison'
  '"instanceof"': 'keyword.operator.comparison'
  '"void"': 'keyword.operator.comparison'

  '"new"': 'keyword.operator.instance'
  '"delete"': 'keyword.operator.instance'
  '"typeof"': 'keyword.operator.instance'

  '"!"': 'keyword.operator.logical.symbolic'
  '"&&"': 'keyword.operator.logical.symbolic'
  '"||"': 'keyword.operator.logical.symbolic'

  '"?"': 'keyword.operator.ternary.symbolic'
  'ternary_expression > ":"': 'keyword.operator.ternary.symbolic'

  'this': 'keyword.variable.this'
  'super': 'keyword.variable.super'

  '"get"': 'keyword.storage.modifier.getter'
  '"set"': 'keyword.storage.modifier.setter'
  '"extends"': 'keyword.storage.modifier'
  '"static"': 'keyword.storage.modifier'
  '"async"': 'keyword.storage.modifier'

  '"var"': 'keyword.storage.declaration'
  '"let"': 'keyword.storage.declaration'
  '"const"': 'keyword.storage.declaration'
  '"function"': 'keyword.storage.declaration'
  '"class"': 'keyword.storage.declaration'

  # Entity
  '''
  class > identifier,
  class_declaration > identifier
  ''': 'entity.type.class'

  'class_heritage > identifier': 'entity.type.class.inherited'

  '''
  new_expression > identifier,
  new_expression > member_expression > property_identifier
  ''': 'entity.type.class.constructor.call'

  'member_expression > new_expression > member_expression > property_identifier': [
    {
      match: '^[0-9_$]*[A-Z][A-Z0-9_$]*$',
      scopes: 'entity.variable.member.immutable' # new _.VARIABLE._()
    },
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class' # new _.Type._()
    },
    'entity.variable.member' # new _.variable._()
  ]

  'call_expression > identifier': [
    {
      exact: 'require',
      scopes: 'entity.function.support.call'
    },
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class.constructor.call' # Type()
    },
    'entity.function.call' # function()
  ]

  '''
  call_expression > member_expression > property_identifier
  ''': [
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class.constructor.call' # _.Type()
    },
    'entity.function.method.call' # _.function()
  ]

  '''
  function > identifier,
  decorator > identifier,
  decorator > member_expression > property_identifier,
  function_declaration > identifier
  ''': [
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class.constructor' # Type
    },
    'entity.function' # function
  ]

  '''
  generator_function > identifier,
  generator_function_declaration > identifier
  ''': 'entity.function'

  'method_definition > property_identifier': 'entity.function.method'

  '''
  property_identifier,
  shorthand_property_identifier
  ''': [
    {
      match: '^[0-9_$]*[A-Z][A-Z0-9_$]*$',
      scopes: 'entity.variable.member.immutable' # _.VARIABLE
    },
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class' # _.Type
    },
    'entity.variable.member' # _.variable
  ]

  'identifier': [
    {
      exact: 'Infinity',
      scopes: 'constant.language.numeric'
    },
    {
      match: '^(global|globalThis||module|exports|process|__filename|__dirname)$',
      scopes: 'entity.variable.support'
    },
    {
      match: '^(window|self|frames|event|document|performance|screen|navigator|console)$'
      scopes: 'entity.variable.support.dom'
    },
    {
      exact: 'arguments',
      scopes: 'entity.variable.support.arguments'
    },
    {
      match: '^[0-9_$]*[A-Z][A-Z0-9_$]*$',
      scopes: 'entity.variable.immutable'
    },
    {
      match: '^[0-9_$]*[A-Z]',
      scopes: 'entity.type.class'
    },
    'entity.variable'
  ]

  'formal_parameters > identifier': 'entity.variable.parameter'
  'arrow_function > identifier:nth-child(0)': 'entity.variable.parameter'

  '''
  jsx_opening_element > identifier,
  jsx_closing_element > identifier,
  jsx_self_closing_element > identifier
  ''': [
    {
      match: '^[A-Z]',
      scopes: 'entity.type.component.jsx'
    },
    'entity.tag.jsx'
  ]

  'jsx_attribute > property_identifier': 'entity.attribute.jsx'

  # String
  'string': 'string.quoted'

  'template_string': 'string.template.quoted'
  'template_substitution': 'string.part.interpolation'

  'regex': 'string.regexp.quoted'
  'regex > regex_flags': 'string.regexp.part.language.control.mode'

  'jsx_attribute > string': 'string.quoted.attribute-value.jsx'

  # Constant
  'escape_sequence': [
    {
      match: '^\\\\[uUxftvnrb0-9]',
      scopes: 'constant.character.escape.code'
    },
    'constant.character.escape'
  ]

  'number': 'constant.numeric'

  'undefined': 'constant.language.undefined'
  'null': 'constant.language.null'
  'true': 'constant.language.boolean.true'
  'false': 'constant.language.boolean.false'

  # Text
  'jsx_text': 'text.jsx'

  # Comment
  'comment': [
    {
      match: '^//',
      scopes: 'comment.line'
    },
    'comment.block'
  ]
  'hash_bang_line': 'comment.block'

  # Punctuation
  '"."': 'punctuation.accessor.member'
  '","': 'punctuation.separator'
  '";"': 'punctuation.terminator'
  '":"': 'punctuation.delimiter'
  '"("': 'punctuation.delimiter'
  '")"': 'punctuation.delimiter'
  '"{"': 'punctuation.delimiter'
  '"}"': 'punctuation.delimiter'
  '"["': 'punctuation.definition'
  '"]"': 'punctuation.definition'
  '"*"': 'punctuation.definition'
  '"@"': 'punctuation.definition.decorator'
  '"=>"': 'punctuation.operation.lambda'
  '"\\""': 'punctuation.definition.string'
  '"\'"': 'punctuation.definition.string'
  'jsx_attribute > string > "\\""': 'punctuation.definition.string.attribute-value.jsx'
  'jsx_attribute > string > "\'"': 'punctuation.definition.string.attribute-value.jsx'
  'regex > "/"': 'punctuation.definition.string.regexp'

  'rest_parameter > "..."': 'punctuation.operation.variadic.pack'
  'spread_element > "..."': 'punctuation.operation.variadic.unpack'

  'pair > ":"': 'punctuation.association.pair'

  'generator_function > "*"': 'punctuation.definition.function.generator'
  'generator_function_declaration > "*"': 'punctuation.definition.function.generator'
  'method_definition > "*"': 'punctuation.definition.function.generator'
  'yield_expression > "*"': 'punctuation.definition.function.generator'

  'export_statement > "*"': 'punctuation.definition.package.export.wildcard'
  'namespace_import > "*"': 'punctuation.definition.package.import.wildcard'

  'jsx_attribute > "="': 'punctuation.association.pair.attribute-value.jsx'

  'jsx_fragment > "<"': 'punctuation.definition.tag.jsx'
  'jsx_fragment > "/"': 'punctuation.definition.tag.jsx'
  'jsx_fragment > ">"': 'punctuation.definition.tag.jsx'
  'jsx_opening_element > "<"': 'punctuation.definition.tag.jsx'
  'jsx_opening_element > ">"': 'punctuation.definition.tag.jsx'
  'jsx_closing_element > "<"': 'punctuation.definition.tag.jsx'
  'jsx_closing_element > "/"': 'punctuation.definition.tag.jsx'
  'jsx_closing_element > ">"': 'punctuation.definition.tag.jsx'
  'jsx_self_closing_element > "<"': 'punctuation.definition.tag.jsx'
  'jsx_self_closing_element > "/"': 'punctuation.definition.tag.jsx'
  'jsx_self_closing_element > ">"': 'punctuation.definition.tag.jsx'

  'jsx_expression > "{"': 'punctuation.delimiter.embedded.jsx'
  'jsx_expression > "}"': 'punctuation.delimiter.embedded.jsx'

  'template_substitution > "${"': 'punctuation.delimiter.string.part.interpolation'
  'template_substitution > "}"': 'punctuation.delimiter.string.part.interpolation'

  'class_body > "{"': 'punctuation.delimiter.body.class'
  'class_body > "}"': 'punctuation.delimiter.body.class'

  'function > statement_block > "{"': 'punctuation.delimiter.body.function'
  'function > statement_block > "}"': 'punctuation.delimiter.body.function'
  'function_declaration > statement_block > "{"': 'punctuation.delimiter.body.function'
  'function_declaration > statement_block > "}"': 'punctuation.delimiter.body.function'
  'arrow_function > statement_block > "{"': 'punctuation.delimiter.body.function.lambda'
  'arrow_function > statement_block > "}"': 'punctuation.delimiter.body.function.lambda'
  'method_definition > statement_block > "{"': 'punctuation.delimiter.body.function.method'
  'method_definition > statement_block > "}"': 'punctuation.delimiter.body.function.method'
  'generator_function > statement_block > "{"': 'punctuation.delimiter.body.function.generator'
  'generator_function > statement_block > "}"': 'punctuation.delimiter.body.function.generator'
  'generator_function_declaration > statement_block > "{"': 'punctuation.delimiter.body.function.generator'
  'generator_function_declaration > statement_block > "}"': 'punctuation.delimiter.body.function.generator'

  'switch_body > "{"': 'punctuation.delimiter.body.switch'
  'switch_body > "}"': 'punctuation.delimiter.body.switch'

  'export_clause > "{"': 'punctuation.delimiter.package'
  'export_clause > "}"': 'punctuation.delimiter.package'
  'named_imports > "{"': 'punctuation.delimiter.package'
  'named_imports > "}"': 'punctuation.delimiter.package'

  'statement_block > "{"': 'punctuation.delimiter.statement'
  'statement_block > "}"': 'punctuation.delimiter.statement'

  'object > "{"': 'punctuation.definition.collection.object'
  'object > "}"': 'punctuation.definition.collection.object'

  'array > "["': 'punctuation.definition.collection.array'
  'array > "]"': 'punctuation.definition.collection.array'

  'subscript_expression > "["': 'punctuation.delimiter.subscript'
  'subscript_expression > "]"': 'punctuation.delimiter.subscript'

  'computed_property_name > "["': 'punctuation.delimiter.expression'
  'computed_property_name > "]"': 'punctuation.delimiter.expression'

  'catch_clause > "("': 'punctuation.delimiter.expression'
  'catch_clause > ")"': 'punctuation.delimiter.expression'

  'for_statement > "("': 'punctuation.delimiter.expression'
  'for_statement > ")"': 'punctuation.delimiter.expression'

  'for_in_statement > "("': 'punctuation.delimiter.expression'
  'for_in_statement > ")"': 'punctuation.delimiter.expression'

  'parenthesized_expression > "("': 'punctuation.delimiter.expression'
  'parenthesized_expression > ")"': 'punctuation.delimiter.expression'

  'arguments > "("': 'punctuation.delimiter.arguments'
  'arguments > ")"': 'punctuation.delimiter.arguments'

  'formal_parameters > "("': 'punctuation.delimiter.parameters'
  'formal_parameters > ")"': 'punctuation.delimiter.parameters'

  'ERROR > "."': 'punctuation.accessor.member.invalid.illegal'
  'ERROR > ","': 'punctuation.separator.invalid.illegal'
  'ERROR > ";"': 'punctuation.terminator.invalid.illegal'
  'ERROR > ":"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "("': 'punctuation.delimiter.invalid.illegal'
  'ERROR > ")"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "{"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "}"': 'punctuation.delimiter.invalid.illegal'
  'ERROR > "["': 'punctuation.definition.invalid.illegal'
  'ERROR > "]"': 'punctuation.definition.invalid.illegal'
  'ERROR > "@"': 'punctuation.definition.decorator.invalid.illegal'
  'ERROR > "..."': 'punctuation.operation.variadic.invalid.illegal'
  'ERROR > "=>"': 'punctuation.operation.lambda.invalid.illegal'
  'ERROR > "\\""': 'punctuation.definition.string.invalid.illegal'
  'ERROR > "\'"': 'punctuation.definition.string.invalid.illegal'

  # Meta
  'jsx_element': 'meta.embedded.jsx'
  'jsx_element > jsx_element': ''
